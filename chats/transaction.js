import logger from "../logger.js";
import {getRedisClient} from "../redis_con.js";

export async function transactionNamespace(io) {
    const transactionNamespace = io.of("/transaction");
    const redisClient = await getRedisClient(); // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Redis

    transactionNamespace.on("connection", (socket) => {
        logger.info(`üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ /transaction: ${socket.id}`);
        //console.log("üì• Handshake –¥–∞–Ω–Ω—ã–µ:", socket.handshake);

        socket.on("subscribe", (data) => {
            logger.info(`üì© –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞: ${JSON.stringify(data)}`);

            if (data.channel) {
                socket.join(data.channel);
                logger.info(`‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: ${data.channel}`);
            } else {
                logger.info("‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–Ω–∞–ª –≤ subscribe");
            }

            socket.on('event', (data, callback) => {
                console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', data);

                // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∫—É—é-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...
                // ...

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                if (callback && typeof callback === 'function') {
                    callback({status: 'accepted', message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º'});
                }
            });

            async function sendUnreadMessages() {
                const messages = await redisClient.lRange(`channel:transaction:messages`, 0, -1);

                if (messages) {
                    messages.forEach((message) => {
                        io.of("/transaction").to('transaction').timeout(5000).emit("event", JSON.parse(message), true);
                        logger.info(message);
                    });
                    await redisClient.del(`channel:transaction:messages`); // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                }
                //await redisClient.lSet(`channel:billing:messages`, 4, "TO_DELETE");
                // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π "TO_DELETE"
                //await redisClient.lRem(`channel:billing:messages`, 1, "TO_DELETE");


            }

            sendUnreadMessages();
        });


        //const channel = socket.handshake; // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è


    });
}