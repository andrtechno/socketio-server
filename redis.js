import dotenv from 'dotenv';
import redisAdapter from '@socket.io/redis-adapter';
import redis from 'redis';
import logger from './logger.js';

let pubClient, subClient;

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
 */
async function connectRedis() {
    try {
        logger.info('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...');
        pubClient = redis.createClient({
            database: process.env.REDIS_DB,
            socket: {
                host: process.env.REDIS_HOST, // –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ Redis
                port: process.env.REDIS_PORT,        // –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ Redis
            }
        });



        subClient = pubClient.duplicate();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        pubClient.on('error', (err) => console.error('‚ùå –û—à–∏–±–∫–∞ Redis (pub):', err));
        subClient.on('error', (err) => console.error('‚ùå –û—à–∏–±–∫–∞ Redis (sub):', err));

        await Promise.all([pubClient.connect(), subClient.connect()]);
        await pubClient.select(process.env.REDIS_DB);
        await subClient.select(process.env.REDIS_DB);

        logger.info('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω DB', process.env.REDIS_DB);
        return {pubClient, subClient};
    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', err);
        setTimeout(connectRedis, 5000); // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.io
 */
export async function initRedis(io) {
    const clients = await connectRedis();
    if (clients) {
        io.adapter(redisAdapter(clients.pubClient, clients.subClient));
        logger.info('‚úÖ Redis Adapter –ø–æ–¥–∫–ª—é—á–µ–Ω');
        return clients.pubClient;
    }
}

// module.exports = {initRedis};
